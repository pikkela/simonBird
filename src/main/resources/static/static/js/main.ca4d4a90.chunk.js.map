{"version":3,"sources":["logo.svg","component/Bird.js","component/ObservationComponent.js","component/ObservationList.js","container/BirdContainer.js","App.js","serviceWorker.js","index.js"],"names":["Bird","props","useState","birds","setbirds","getBirds","console","log","fetch","then","Response","json","data","useEffect","birdOptions","map","bird","value","id","finnish","onChange","event","e","target","update","name","onClick","ObservationComponent","place","user","time","observation","setObservation","updateData","key","val","temp","Object","assign","birdid","havainto","type","method","headers","body","JSON","stringify","ObservationList","setobservation","columns","Header","accessor","Cell","className","BirdContainer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca4d4a90.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React, {useState, useEffect} from 'react'\r\n\r\n/**komponentti näyttää linnut alasvetovalikkoon */\r\n\r\nconst Bird = (props) => {\r\n    //hook state muuttuja\r\n    const [birds, setbirds] = useState([{\"id\":1,\"textid\":\"CYGOLO\",\"latin\":\"Cygnus olor\",\"finnish\":\"Kyhmyjoutsen\",\"swedish\":\"Knölsvan\",\"english\":\"Mute Swan\"},{\"id\":2,\"textid\":\"CYGCYG\",\"latin\":\"Cygnus cygnus\",\"finnish\":\"Laulujoutsen\",\"swedish\":\"Sångsvan\",\"english\":\"Whooper Swan\"}]);\r\n    /**haetaan linnut palvelimelta */\r\n    function getBirds(){\r\n        console.log(\"haetaan\");\r\n        fetch('http://localhost:8080/birds')\r\n        .then(Response => Response.json())\r\n        .then(data =>setbirds(data))\r\n    }\r\n\r\n    function handleUpdate(e){\r\n        console.log(\"halloo\");\r\n        props.update(e);\r\n    }\r\n\r\n    /**ajetaan automaattisesti haetaan linnut kerran*/\r\n    useEffect(() => {\r\n        getBirds();\r\n    },[]);\r\n    //funktio järjestää option elementin sisään\r\n    //map looppaa lintutaulukon läpi\r\n    const birdOptions = birds.map((bird) => {\r\n        return <option key={bird.id} value={bird.id}>{bird.finnish}</option>\r\n    })\r\n\r\n    //komponentilla on pakko olla return\r\n    return(\r\n        //komponentissa saa olla vain yksi juurielementti\r\n        <div>\r\n           <div>\r\n                <select onChange={(event)=>handleUpdate(event.target.value)} name=\"bird\">\r\n                   {birdOptions}\r\n                </select>   \r\n                <button onClick={getBirds}>päivitä</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bird;","import React,{useState} from 'react';\r\nimport Bird from './Bird';\r\n\r\n\r\nconst ObservationComponent = () => {\r\n\r\n    //reactissa muuttujan tyyppi on hook muuttuja\r\n    const [observation, setObservation] = useState({place:\"vaasa\",user:\"jaska\", time:\"2021-02-03\"});\r\n\r\n    function updateData(key, val) {\r\n        //don't mutate, take a copy first from person\r\n        //https://medium.com/better-programming/3-ways-to-clone-objects-in-javascript-f752d148054d\r\n        let temp = Object.assign({}, observation);\r\n        temp[key] = val;\r\n        setObservation(temp);\r\n      }\r\n\r\n      //send POST reques to Spring boot server to store data to database\r\n\r\n      function add(){\r\n          fetch(\"http://localhost:8080/observation\", {\r\n              method:\"POST\",\r\n              headers:{\r\n                  'Content-Type': 'application/json'\r\n                  // 'Content-Type': 'application/x-www-form-urlencoded',\r\n              },\r\n              body: JSON.stringify(observation)\r\n          })\r\n      }\r\n\r\n    function updateBird(birdid){\r\n        //dont mutate but copy\r\n        let havainto = {...observation};\r\n        havainto.bird=birdid;\r\n        setObservation(havainto);\r\n    }\r\n\r\n\r\n    return (\r\n    <div>\r\n        <div>\r\n            Lintu:\r\n            <Bird update={updateBird} />\r\n            <br/>\r\n\r\n            Paikka:\r\n            <input type=\"text\" value={observation.place} onChange={e => updateData(\"place\", e.target.value)}></input>\r\n            <br/>\r\n                      \r\n            Käyttäjä:\r\n            <input type=\"text\" value={observation.user} onChange={e => updateData(\"user\", e.target.value)}></input>\r\n            <br/>\r\n                     \r\n            Aika:\r\n            <input type=\"text\" value={observation.time} onChange={e => updateData(\"time\", e.target.value)}></input>\r\n            <br/>\r\n            <button type=\"button\" onClick={add}>lisää</button>\r\n            <hr/>\r\n            {/* <div>{JSON.stringify(observation)}</div> */}\r\n        </div>\r\n        \r\n    </div>)\r\n}\r\n\r\nexport default ObservationComponent;","import React,{useState,useEffect} from 'react'\r\nimport ReactTable from 'react-table-v6'\r\nimport 'react-table-v6/react-table.css'\r\n\r\nconst ObservationList = () => {\r\n\r\n    const [observation, setobservation] = useState([]);\r\n    //{bird:\"tikka\", place:\"vaasa\",user:\"jaska\", time:\"2021-02-03\"}\r\n    /**haetaan linnut palvelimelta */\r\n    function getBirds(){\r\n        console.log(\"haetaan\");\r\n        fetch('http://localhost:8080/observations')\r\n        .then(Response => Response.json())\r\n        .then(data =>setobservation(data))\r\n    }\r\n    useEffect(() => {\r\n        getBirds();\r\n    },[]);\r\n\r\n\r\n     \r\n      const columns = [{\r\n        Header: 'Lintu',\r\n        accessor: 'bird' // String-based value accessors!\r\n      }, {\r\n        Header: 'Paikka',\r\n        accessor: 'place',\r\n        Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n      },\r\n      {\r\n        Header: 'aika',\r\n        accessor: 'time',\r\n        Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n      },\r\n      {\r\n        Header: 'käyttäjä',\r\n        accessor: 'user',\r\n        Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n      }]\r\n    return (\r\n        <div>\r\n             <ReactTable data={observation} columns={columns}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ObservationList\r\n","import React from 'react'\r\nimport ObservationComponent from '../component/ObservationComponent'\r\nimport ObservationList from '../component/ObservationList'\r\n\r\n//Show page including importing birds, add observation and list observations\r\n\r\nconst BirdContainer = () => {\r\n    return (\r\n        <div>\r\n            <ObservationComponent />\r\n            \r\n            <hr/>\r\n            <div><a href=\"http://localhost:8080/importBirds\">Tuo linnut</a></div>\r\n            <hr/>\r\n            <ObservationList />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BirdContainer\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport BirdContainer from './container/BirdContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>Tallenna lintuhavainto</h2>\r\n      <BirdContainer />\r\n   \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}